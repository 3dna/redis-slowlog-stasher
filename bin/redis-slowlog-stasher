#!/usr/bin/env ruby

require 'redis_slowlog_stasher'


require 'time'
require 'redis'
require 'bunny'
require 'uri'
require 'json'


options = RedisSlowlogStasher::Argparser.parse(ARGV)
logger = options.logger
redis_arg, rabbit_arg = ARGV

# methinks this logic should just be in the StateFile?
# if you pass it a nil filename write is a noop and read gives you 0,0?
if options.state_file
  previous_entry_timestamp, previous_entry_id = options.state_file.read
else
  previous_entry_timestamp, previous_entry_id = [0,0]
end

redis_uri = URI.parse(redis_arg)
redis = Redis.new(host: redis_uri.host, port: redis_uri.port, password: redis_uri.user)

rabbit = Bunny.new(rabbit_arg)
rabbit.start
channel = rabbit.create_channel
exchange = channel.direct(options.exchange)

base_event_object = {}
if options.type
  base_event_object.merge!({'type' => options.type})
end
if options.tags
  base_event_object.merge!({'tags' => options.tags})
end
if options.fields
  base_event_object.merge!(options.fields)
end

# start the main loop
loop do
  logger.debug("loop iteration")
  slowlog_entries = redis.slowlog('get',options.check_entries)

  slowlog_entries.reverse.each do |slowlog_entry|
    # "parse" the entry
    entry_id, entry_timestamp, duration, args = slowlog_entry
    command = args.shift
    args.map! { |arg| arg.force_encoding('US-ASCII')

    #logger.debug("previous_entry_id: #{previous_entry_id}, entry_id: #{entry_id}; previous_entry_timestamp: #{previous_entry_timestamp}, entry_timestamp: #{entry_timestamp}")

    # TODO: combine all of these into one ugly if
    if (entry_id > previous_entry_id) || (entry_id < previous_entry_id && entry_timestamp >= previous_entry_timestamp) || (entry_id == previous_entry_id && entry_timestamp != previous_entry_timestamp)
      logger.info("new entry id #{entry_id} duration #{duration} with timestamp #{entry_timestamp}: #{command} #{args}")
      entry_hash = base_event_object.merge({
        '@timestamp' => Time.at(entry_timestamp).utc.iso8601,
        'version' => 1,
        'duration' => duration,
        'command' => command,
        'args' => args,
      })

      logger.debug(entry_hash.to_json)
      # log it
      exchange.publish(entry_hash.to_json, routing_key: options.routing_key)

      # update trackers
      previous_entry_timestamp = entry_timestamp
      previous_entry_id = entry_id
      if options.state_file
        options.state_file.write(entry_timestamp, entry_id)
      end
    end
  end

  sleep options.check_interval
end

